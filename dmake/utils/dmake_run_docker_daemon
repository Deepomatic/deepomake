#!/bin/bash
#
# Usage:
# ID=$(dmake_run_docker_daemon APP_NAME LINK_NAME NAME ARGS...)
#
# Result:
# Run a docker daemon, save container ID to list of containers to stop and return the container ID
# if LINK_NAME is non-empty, save container ID as the link for LINK_NAME (in <app>/links/<LINK_NAME>.id)

test "${DMAKE_DEBUG}" = "1" && set -x

if [ $# -lt 3 ]; then
    dmake_fail "$0: Missing arguments"
    echo "exit 1"
    exit 1
fi

if [ -z "${DMAKE_TMP_DIR}" ]; then
    dmake_fail "Missing environment variable DMAKE_TMP_DIR"
    exit 1
fi

set -e

APP_NAME=$1; shift
LINK_NAME=$1; shift
NAME=$1; shift


CONTAINER_ID=`dmake_run_docker "" "${NAME}" -d "$@"`
while [ 1 = 1 ]; do
    if [ `docker ps -f id=$CONTAINER_ID -f status=running | wc -l` -gt "0" ]; then
        break
    fi
    if [ `docker ps -a -f id=$CONTAINER_ID -f status=exited | wc -l` -gt "0" ]; then
        echo "Link ${LINK_NAME} exited"
        exit 1
    fi
    if [ `docker ps -a -f id=$CONTAINER_ID -f status=restarting | wc -l` -gt "0" ]; then
        echo "Link ${LINK_NAME} is restarting"
        exit 1
    fi
    sleep 1
done

if [ ! -z "${LINK_NAME}" ]; then
  CACHE_DIR="${DMAKE_TMP_DIR}/links/${APP_NAME}"
  ID_FILE="${CACHE_DIR}/${LINK_NAME}.id"
  mkdir -p ${CACHE_DIR}
  echo "${CONTAINER_ID}" > ${ID_FILE}
fi

echo $CONTAINER_ID
