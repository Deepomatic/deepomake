#!/usr/bin/env python

import sys
import os
import argparse
import dmake.commands as commands
import dmake.core as core
import dmake.common as common
from dmake.common import DMakeException


def check_is_git_repo():
    try:
        common.run_shell_command('git rev-parse --abbrev-ref HEAD')
        return True
    except common.ShellError as e:
        common.logger.error("Current directory is not a Git repository:\n%s" % str(e))
        return False


def add_argument(parsers, *args, **kwargs):
    for parser in parsers:
        parser.add_argument(*args, **kwargs)


# Find root
try:
    root_dir, sub_dir = common.find_repo_root()
except common.ShellError as e:
    common.logger.error("Current directory is not a Git repository:\n%s" % str(e))
    sys.exit(1)
os.chdir(root_dir)

# Defines command line parser
argparser = argparse.ArgumentParser(prog='dmake')
subparsers = argparser.add_subparsers(dest='cmd')
subparsers.required = True

parser_test    = subparsers.add_parser('test', help="Launch tests for the whole repo or, if specified, an app or one of its services.")
parser_run     = subparsers.add_parser('run', help="Launch the application or only one of its services.")
parser_stop    = subparsers.add_parser('stop', help="Stop the containers lauched with 'dmake run'.")
parser_shell   = subparsers.add_parser('shell', help="Run a shell session withing a docker container with the environment set up for a given service.")
parser_deploy  = subparsers.add_parser('deploy', help="Deploy specified apps and services.")
parser_release = subparsers.add_parser('release', help="Create a release of the app on Github.")


add_argument([parser_test, parser_deploy], "service", nargs='?', default='*', help="Apply command to the full repository or, if specified, to the app/service. When specifying a service, you may skip the app if there is no ambiguity, otherwise, you need to specify 'app/service'.")
add_argument([parser_shell],               "service", nargs='?', default='.', help="Run a shell session withing the docker base image for the given service. You may skip the app if there is no ambiguity, otherwise, you need to specify 'app/service'.")
add_argument([parser_run, parser_stop],    "service", help="Run an application or a service. When specifying a service, you may skip the app if there is no ambiguity, otherwise, you need to specify 'app/service'.")

parser_shell.add_argument("-c", '--command', nargs='?', help="Pass to `docker run` specified command instead of `docker.command` defined in `dmake.yml` (default: `bash`).")
add_argument([parser_shell, parser_run, parser_test], "-d", "--dependencies", required=False, default=False, action="store_true", help="By default, the service is launched as a standalone. If this flag is specified, the dependancies of the service and links specified in the test config as run as well.")
add_argument([parser_shell, parser_run], "-b", "--branch", required=False, default=None, help="Allow to launch the dockers with the environment variables of the given branch.")

parser_release.add_argument("app", help="Create the release for the given app.")
parser_release.add_argument('branch', nargs='?', default="master", help="The branch from which to create the release.")

parser_test.set_defaults(func=core.make)
parser_run.set_defaults(func=core.make)
parser_stop.set_defaults(func=commands.stop.entry_point)
parser_shell.set_defaults(func=core.make)
parser_deploy.set_defaults(func=commands.deploy.entry_point)
parser_release.set_defaults(func=commands.release.entry_point)

try:
    # Parse command args
    args = argparser.parse_args()
    common.init(args)
    args.func(args)
except DMakeException as e:
    print('ERROR: ' + str(e))
    sys.exit(1)
